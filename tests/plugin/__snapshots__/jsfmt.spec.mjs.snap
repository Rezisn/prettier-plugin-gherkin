// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`comment_before_given.feature 1`] = `
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
source
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Feature: A comment before a "Given" should stay before the "Given".
    The blankline should be before the comment and not between the comment and the "Given".

    Scenario:
        Given I have a feature file
        When I run the feature file
        Then I should see the output

        # this comment should stay just before the second given
        Given I have another feature file
        When I run the feature file
        Then I should see the output
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
options: {}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Feature: A comment before a "Given" should stay before the "Given".
    The blankline should be before the comment and not between the comment and the "Given".

    Scenario:
        Given I have a feature file
        When I run the feature file
        Then I should see the output

        # this comment should stay just before the second given
        Given I have another feature file
        When I run the feature file
        Then I should see the output

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
options: {
 "forceNewlineBetweenStepBlocks": true
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Feature: A comment before a "Given" should stay before the "Given".
    The blankline should be before the comment and not between the comment and the "Given".

    Scenario:
        Given I have a feature file

        When I run the feature file
        Then I should see the output

        # this comment should stay just before the second given
        Given I have another feature file

        When I run the feature file
        Then I should see the output

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
`;

exports[`data_table_with_comments.feature 1`] = `
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
source
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Feature: accountability
    Scenario: Scenario Outline name
        Given context
        Then table node with a comment:
            | amountForPro       | 0  |
            # a comment in between
            | collectedFeeAmount | 95 |
        Then result

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
options: {}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Feature: accountability

    Scenario: Scenario Outline name
        Given context
        Then table node with a comment:
            | amountForPro       | 0  |
            # a comment in between
            | collectedFeeAmount | 95 |
        Then result

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
options: {
 "forceNewlineBetweenStepBlocks": true
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Feature: accountability

    Scenario: Scenario Outline name
        Given context
        Then table node with a comment:
            | amountForPro       | 0  |
            # a comment in between
            | collectedFeeAmount | 95 |
        Then result

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
`;

exports[`datatable_with_PHP_FQCN.feature 1`] = `
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
source
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Feature: A data table with PHP Fully Qualified Classnames

    Scenario:
        When I have a data table
            | entityClassName | id |
            | App\\Entity\\Cart | 4 |
            | App\\\\Entity\\\\Cart | 5 |
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
options: {}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Feature: A data table with PHP Fully Qualified Classnames

    Scenario:
        When I have a data table
            | entityClassName | id |
            | App\\Entity\\Cart | 4  |
            | App\\Entity\\Cart | 5  |

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
options: {
 "forceNewlineBetweenStepBlocks": true
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Feature: A data table with PHP Fully Qualified Classnames

    Scenario:
        When I have a data table
            | entityClassName | id |
            | App\\Entity\\Cart | 4  |
            | App\\Entity\\Cart | 5  |

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
`;

exports[`docstring.feature 1`] = `
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
source
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Feature: Test different embed

    Scenario: XML
        When I receive the following feed from the bank:
        """xml
        <feed>
        <account number="123456789">
        <entry>
        <type>credit</type>
        <amount>1000</amount>
        <label>My company salary</label>
        </entry>
        </account>
        </feed>
        """

    Scenario: JSON
        When I receive the following feed from the bank:
        """json
        { "account": 
          "1234",
          "amount": 1000}
        """

    Scenario: JSON if no language is specified (default fallback)
        When I receive the following feed from the bank:
        """
        { "account": 
          "1234",
          "amount": 1000}
        """

    Scenario: GraphQL
        When I make the following query to the API:
        """graphql
        union Transaction =  CreditTransaction|DebitTransaction

        query AccountBalance($accountNumber:String!) {
            account(accountNumber:$accountNumber) {
                balance
                transactions { amount
                }
            }
        }
        """

    Scenario: Unknown
        When I make the following query to the API:
        """unknown-language
        this language is not known from prettier
        """

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
options: {}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Feature: Test different embed

    Scenario: XML
        When I receive the following feed from the bank:
            """xml
            <feed>
                <account number="123456789">
                    <entry>
                        <type>credit</type>
                        <amount>1000</amount>
                        <label>My company salary</label>
                    </entry>
                </account>
            </feed>
            """

    Scenario: JSON
        When I receive the following feed from the bank:
            """json
            { "account": "1234", "amount": 1000 }
            """

    Scenario: JSON if no language is specified (default fallback)
        When I receive the following feed from the bank:
            """
            { "account": "1234", "amount": 1000 }
            """

    Scenario: GraphQL
        When I make the following query to the API:
            """graphql
            union Transaction = CreditTransaction | DebitTransaction

            query AccountBalance($accountNumber: String!) {
                account(accountNumber: $accountNumber) {
                    balance
                    transactions {
                        amount
                    }
                }
            }
            """

    Scenario: Unknown
        When I make the following query to the API:
            """unknown-language
            this language is not known from prettier
            """

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
options: {
 "forceNewlineBetweenStepBlocks": true
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Feature: Test different embed

    Scenario: XML
        When I receive the following feed from the bank:
            """xml
            <feed>
                <account number="123456789">
                    <entry>
                        <type>credit</type>
                        <amount>1000</amount>
                        <label>My company salary</label>
                    </entry>
                </account>
            </feed>
            """

    Scenario: JSON
        When I receive the following feed from the bank:
            """json
            { "account": "1234", "amount": 1000 }
            """

    Scenario: JSON if no language is specified (default fallback)
        When I receive the following feed from the bank:
            """
            { "account": "1234", "amount": 1000 }
            """

    Scenario: GraphQL
        When I make the following query to the API:
            """graphql
            union Transaction = CreditTransaction | DebitTransaction

            query AccountBalance($accountNumber: String!) {
                account(accountNumber: $accountNumber) {
                    balance
                    transactions {
                        amount
                    }
                }
            }
            """

    Scenario: Unknown
        When I make the following query to the API:
            """unknown-language
            this language is not known from prettier
            """

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
`;

exports[`docstring_with_json.feature 1`] = `
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
source
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Feature: complex docstring with JSON in it

    Scenario:
    Given a docstring with 
        """
        1
        "
        2
        \\"
        3
        \\"\\"\\"
        4
        """

        Given I have a complex docstring
        """
        A docstring that is not JSON 
        =======================================

        but will include some somewhere
        -----------------------------------------------------

         [WARNING] Some warning

                   {"error":"NOT AUTHENTICATED","comment":"authentication refused"}

         [OK] Declarations complete.
        """
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
options: {}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Feature: complex docstring with JSON in it

    Scenario:
        Given a docstring with
            """
            1
            "
            2
            \\"
            3
            \\"\\"\\"
            4
            """

        Given I have a complex docstring
            """
            A docstring that is not JSON
            =======================================

            but will include some somewhere
            -----------------------------------------------------

             [WARNING] Some warning

                       {"error":"NOT AUTHENTICATED","comment":"authentication refused"}

             [OK] Declarations complete.
            """

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
options: {
 "forceNewlineBetweenStepBlocks": true
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Feature: complex docstring with JSON in it

    Scenario:
        Given a docstring with
            """
            1
            "
            2
            \\"
            3
            \\"\\"\\"
            4
            """

        Given I have a complex docstring
            """
            A docstring that is not JSON
            =======================================

            but will include some somewhere
            -----------------------------------------------------

             [WARNING] Some warning

                       {"error":"NOT AUTHENTICATED","comment":"authentication refused"}

             [OK] Declarations complete.
            """

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
`;

exports[`example.feature 1`] = `
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
source
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
@accountability
@accountability-json
Feature: accountability
    accounts should always be good

    Scenario Outline: Scenario Outline name
        Given I have <number> cukes in my belly
        When I wait <hour> hour
        Then my belly should growl

        Examples:
            | number | hour |
            | 1      |   the first hour of the day    |
            | 2      | 2    |

    @truncateTables
    Scenario: Check accountability
        The scenario definition for "Check accountability"
        # Insert fixtures
        Given the following fixtures files are loaded:
            | 10.contracts.yml |
            | 20.wallet.yml    |
            | 30.tax.yml       |

        Given I inject the header "authorization" with value 'Bearer some-token'

        And I inject the header "accept" with value "application/json"

        Given I create an order
        Then the response status code should be 200
        When I pay the latest order
        And I refund the last payment and transaction list with transactions:
            """
            [
                {
                    "name": "card",
                    "credit": 5000
                }
            ]
            """

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
options: {}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
@accountability
@accountability-json
Feature: accountability
    accounts should always be good

    Scenario Outline: Scenario Outline name
        Given I have <number> cukes in my belly
        When I wait <hour> hour
        Then my belly should growl

        Examples:
            | number | hour                      |
            | 1      | the first hour of the day |
            | 2      | 2                         |

    @truncateTables
    Scenario: Check accountability
        The scenario definition for "Check accountability"

        # Insert fixtures
        Given the following fixtures files are loaded:
            | 10.contracts.yml |
            | 20.wallet.yml    |
            | 30.tax.yml       |

        Given I inject the header "authorization" with value 'Bearer some-token'

        And I inject the header "accept" with value "application/json"

        Given I create an order
        Then the response status code should be 200
        When I pay the latest order
        And I refund the last payment and transaction list with transactions:
            """
            [
                {
                    "name": "card",
                    "credit": 5000
                }
            ]
            """

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
options: {
 "forceNewlineBetweenStepBlocks": true
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
@accountability
@accountability-json
Feature: accountability
    accounts should always be good

    Scenario Outline: Scenario Outline name
        Given I have <number> cukes in my belly

        When I wait <hour> hour
        Then my belly should growl

        Examples:
            | number | hour                      |
            | 1      | the first hour of the day |
            | 2      | 2                         |

    @truncateTables
    Scenario: Check accountability
        The scenario definition for "Check accountability"

        # Insert fixtures
        Given the following fixtures files are loaded:
            | 10.contracts.yml |
            | 20.wallet.yml    |
            | 30.tax.yml       |

        Given I inject the header "authorization" with value 'Bearer some-token'
        And I inject the header "accept" with value "application/json"

        Given I create an order
        Then the response status code should be 200

        When I pay the latest order
        And I refund the last payment and transaction list with transactions:
            """
            [
                {
                    "name": "card",
                    "credit": 5000
                }
            ]
            """

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
`;

exports[`last_line_comment.feature 1`] = `
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
source
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Feature: some feature
    Scenario: Insert fixtures
        # add OAuth token
        Given something
# saleStartDate is on summer time
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
options: {}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Feature: some feature

    Scenario: Insert fixtures
        # add OAuth token
        Given something

# saleStartDate is on summer time
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
options: {
 "forceNewlineBetweenStepBlocks": true
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Feature: some feature

    Scenario: Insert fixtures
        # add OAuth token
        Given something

# saleStartDate is on summer time
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
`;

exports[`last_line_comment_multiples.feature 1`] = `
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
source
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Feature: some feature
    Scenario: Insert fixtures
        # add OAuth token
        Given something
        # Then the response status code should be 403
        # And the JSON nodes should be equal to:
        #     | hydra:description | Some error did happened |

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
options: {}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Feature: some feature

    Scenario: Insert fixtures
        # add OAuth token
        Given something

# Then the response status code should be 403
# And the JSON nodes should be equal to:
#     | hydra:description | Some error did happened |
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
options: {
 "forceNewlineBetweenStepBlocks": true
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Feature: some feature

    Scenario: Insert fixtures
        # add OAuth token
        Given something

# Then the response status code should be 403
# And the JSON nodes should be equal to:
#     | hydra:description | Some error did happened |
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
`;

exports[`multiple_comments_line.feature 1`] = `
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
source
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Feature: f
    Scenario: s
        When context
        # comment 1
        # comment 2
        Then result

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
options: {}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Feature: f

    Scenario: s
        When context
        # comment 1
        # comment 2
        Then result

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
options: {
 "forceNewlineBetweenStepBlocks": true
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Feature: f

    Scenario: s
        When context
        # comment 1
        # comment 2
        Then result

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
`;

exports[`simple-comment.feature 1`] = `
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
source
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# feature comment
Feature: coucou

    # scenario comment
    Scenario: Scenario name
        # step comment
        Given a step

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
options: {}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# feature comment
Feature: coucou

    # scenario comment
    Scenario: Scenario name
        # step comment
        Given a step

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
options: {
 "forceNewlineBetweenStepBlocks": true
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# feature comment
Feature: coucou

    # scenario comment
    Scenario: Scenario name
        # step comment
        Given a step

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
`;

exports[`unescape_backslashes_table_cell.feature 1`] = `
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
source
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Feature: Escaped pipes
    The \\-character will be considered as an escape in table cell
    iff it is followed by a |-character, a \\-character or an n.

  Scenario: They are the future
    Given a huge table with escaped characters
     | \\n | 
     | \\\\n |
     | \\\\\\n | 
     | \\\\\\\\n |
      | \\\\\\\\\\n |
      | \\\\\\\\\\\\n |
     | \\| | 
     | \\\\\\| |
     | \\ |
     | a\\b |
     | a\\\\b |
      | a\\\\\\b |
      | a\\\\\\\\b |
      | a\\ |
      | \\a |

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
options: {}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Feature: Escaped pipes
    The \\-character will be considered as an escape in table cell
    iff it is followed by a |-character, a \\-character or an n.

    Scenario: They are the future
        Given a huge table with escaped characters
            | \\n       |
            | \\\\n     |
            | \\\\\\n     |
            | \\\\\\\\n   |
            | \\\\\\\\\\n   |
            | \\\\\\\\\\\\n |
            | \\|      |
            | \\\\\\|    |
            | \\       |
            | a\\b     |
            | a\\b     |
            | a\\\\\\b   |
            | a\\\\\\b   |
            | a\\      |
            | \\a      |

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
options: {
 "forceNewlineBetweenStepBlocks": true
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Feature: Escaped pipes
    The \\-character will be considered as an escape in table cell
    iff it is followed by a |-character, a \\-character or an n.

    Scenario: They are the future
        Given a huge table with escaped characters
            | \\n       |
            | \\\\n     |
            | \\\\\\n     |
            | \\\\\\\\n   |
            | \\\\\\\\\\n   |
            | \\\\\\\\\\\\n |
            | \\|      |
            | \\\\\\|    |
            | \\       |
            | a\\b     |
            | a\\b     |
            | a\\\\\\b   |
            | a\\\\\\b   |
            | a\\      |
            | \\a      |

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
`;
